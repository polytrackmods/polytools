name: Rust CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: "sqlite://poly.db"

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - name: Install sccache (prebuilt)
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/v0.10.0/sccache-dist-v0.10.0-x86_64-unknown-linux-musl.tar.gz -o sccache.tar.gz
          tar -xzf sccache.tar.gz
          sudo mv sccache-v0.10.0-x86_64-unknown-linux-musl/sccache /usr/local/bin/.
          sudo chmod +x /usr/local/bin/sccache

      - name: Configure sccache as rustc wrapper
        run: echo "RUSTC_WRAPPER=/usr/local/bin/sccache" >> $GITHUB_ENV

      - name: Cache sccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: sccache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-${{ runner.os }}-
            sccache-

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-deps-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-deps-${{ runner.os }}-
            rust-deps-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            target/
          key: target-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            target-build-${{ runner.os }}-
            target-build-

      - name: Install SQLX CLI
        run: cargo install sqlx-cli --no-default-features --features sqlite

      - name: Run setup script
        run: |
          ./setup.sh

      - name: Build the project
        run: cargo build --release

      - name: Run tests
        run: cargo test --release

      - name: Upload release binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            target/release/poly*
            !target/release/*.d
            !target/release/*.rlib
          if-no-files-found: error
